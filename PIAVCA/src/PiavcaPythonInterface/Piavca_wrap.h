/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.27
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Piavca_WRAP_H_
#define SWIG_Piavca_WRAP_H_

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_
/***********************************************************************
 * director_h.swg
 *
 *     This file contains support for director classes that proxy
 *     method calls from C++ to Python extensions.
 *
 * Author : Mark Rose (mrose@stm.lbl.gov)
 ************************************************************************/

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <exception>


/*
  Use -DSWIG_DIRECTOR_NOUEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swift
*/
#ifndef SWIG_DIRECTOR_NOUEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be usefull for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/* 
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR
#include <map>
namespace Swig {
  class Director;
  SWIGINTERN std::map<void*,Director*>& get_rtdir_map() {
    static std::map<void*,Director*> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void*,Director*>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(Arg) Swig::get_rtdir(static_cast<void*>(Arg))
# define SWIG_DIRECTOR_RGTR(Arg1, Arg2) Swig::set_rtdir(static_cast<void*>(Arg1), Arg2)

#else

# define SWIG_DIRECTOR_CAST(Arg) dynamic_cast<Swig::Director*>(Arg)
# define SWIG_DIRECTOR_RGTR(Arg1, Arg2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {  

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(const char* hdr ="", const char* msg ="") 
    : swig_msg(hdr) {
      swig_msg += msg;
      if (!PyErr_Occurred()) {
	PyErr_SetString(PyExc_TypeError, getMessage());
      } else {
	SWIG_Python_AddErrMesg(getMessage(), 1);
      }
    }

    const char *getMessage() const { 
      return swig_msg.c_str(); 
    }

    static void raise(const char* msg = "") 
    {
      throw DirectorException(msg);
    }
  };

  class UnknownExceptionHandler 
  {
    static void handler();
    
  public:
    
#ifdef SWIG_DIRECTOR_UEH
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(const char* msg="") 
      : Swig::DirectorException("Swig director type mismatch: ", msg) {
    }

    static void raise(const char* msg = "") 
    {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(const char* msg = "") 
      : DirectorException("Swig director python method error: ", msg)
    {
    }    

    static void raise(const char* msg = "") 
    {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException("Swig director pure virtal method called: ", msg)
    { 
    }

    static void raise(const char* msg = "") 
    {
      throw DirectorPureVirtualException(msg);
    }
  };


  /* simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
#define __PTHREAD__
#if defined(_WIN32) || defined(__WIN32__)
#define pthread_mutex_lock EnterCriticalSection
#define pthread_mutex_unlock LeaveCriticalSection
#define pthread_mutex_t CRITICAL_SECTION
#define MUTEX_INIT(var) CRITICAL_SECTION var
#else
#include <pthread.h>
#define MUTEX_INIT(var) pthread_mutex_t var = PTHREAD_MUTEX_INITIALIZER 
#endif
#endif


  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject* swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;
    /* shared flag for breaking recursive director calls */
    static bool swig_up;

#ifdef __PTHREAD__
    /* locks for sharing the swig_up flag in a threaded environment */
    static pthread_mutex_t swig_mutex_up;
    static bool swig_mutex_active;
    static pthread_t swig_mutex_thread;
#endif

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const { 
      if (swig_disown_flag) {
	Py_DECREF(swig_self); 
      }
    }

    /* reset the swig_up flag once the routing direction has been determined */
#ifdef __PTHREAD__
    void swig_clear_up() const { 
      Swig::Director::swig_up = false; 
      Swig::Director::swig_mutex_active = false;
      pthread_mutex_unlock(&swig_mutex_up);
    }
#else
    void swig_clear_up() const { 
      Swig::Director::swig_up = false; 
    }
#endif

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }

    /* discard our reference at destruction */
    virtual ~Director();

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const { 
      return swig_self; 
    }

    /* get the swig_up flag to determine if the method call should be routed
     * to the c++ base class or through the wrapped python object
     */
#ifdef __PTHREAD__
    bool swig_get_up() const { 
      if (Swig::Director::swig_mutex_active) {
	if (pthread_equal(Swig::Director::swig_mutex_thread, pthread_self())) {
	  bool up = swig_up;
	  swig_clear_up();
	  return up;
	}
      }
      return 0;
    }
#else 
    bool swig_get_up() const { 
      bool up = swig_up;
      swig_up = false;
      return up;
    }
#endif

    /* set the swig_up flag if the next method call should be directed to
     * the c++ base class rather than the wrapped python object
     */
#ifdef __PTHREAD__
    void swig_set_up() const { 
      pthread_mutex_lock(&Swig::Director::swig_mutex_up);
      Swig::Director::swig_mutex_thread = pthread_self();
      Swig::Director::swig_mutex_active = true;
      Swig::Director::swig_up = true; 
    }
#else 
    void swig_set_up() const { 
      Swig::Director::swig_up = true; 
    }
#endif

    /* acquire ownership of the wrapped python object (the sense of "disown"
     * is from python) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
	swig_disown_flag=true;
	swig_incref(); 
      } 
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const { 
      if (swig_disown_flag) {
	Py_INCREF(swig_self); 
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char* /* name */) const {
      return true;
    }
    
    virtual void swig_set_inner(const char* /* name */, bool /* val */) const {
    }
  };

}

#endif /* __cplusplus */


#endif

class SwigDirector_TimeCallback : public Piavca::TimeCallback, public Swig::Director {

public:
    SwigDirector_TimeCallback(PyObject *self, tstring _name);
    virtual void timeStep(Piavca::Core *core, float time);
    virtual ~SwigDirector_TimeCallback();
    virtual void init(Piavca::Core *core);
};


class SwigDirector_AvatarTimeCallback : public Piavca::AvatarTimeCallback, public Swig::Director {

public:
    SwigDirector_AvatarTimeCallback(PyObject *self, tstring _name);
    virtual void timeStep(Piavca::Avatar *avatar, float time);
    virtual ~SwigDirector_AvatarTimeCallback();
    virtual void init(Piavca::Avatar *avatar);
};


class SwigDirector_Motion : public Piavca::Motion, public Swig::Director {

public:
    SwigDirector_Motion(PyObject *self);
    SwigDirector_Motion(PyObject *self, Piavca::Motion const &mot);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual Piavca::Motion *clone();
    virtual void setStartTime(float t);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual void reset();
    virtual ~SwigDirector_Motion();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual bool loaded();
    virtual void unload();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_KeyframeMotion : public Piavca::KeyframeMotion, public Swig::Director {

public:
    SwigDirector_KeyframeMotion(PyObject *self, Piavca::tstring fileName, int flags = Piavca::TRANS_NONE, Piavca::Motion *basePosture = NULL);
    SwigDirector_KeyframeMotion(PyObject *self, bool _facial = false);
    SwigDirector_KeyframeMotion(PyObject *self, Piavca::MotionImp *_imp);
    SwigDirector_KeyframeMotion(PyObject *self, Piavca::KeyframeMotion const &mot);
    SwigDirector_KeyframeMotion(PyObject *self, Piavca::Motion &mot);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float t);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual void reset();
    virtual ~SwigDirector_KeyframeMotion();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool loaded();
    virtual void unload();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_TwoMotionCombiner : public Piavca::TwoMotionCombiner, public Swig::Director {

public:
    SwigDirector_TwoMotionCombiner(PyObject *self);
    SwigDirector_TwoMotionCombiner(PyObject *self, Piavca::Motion *m1, Piavca::Motion *m2);
    SwigDirector_TwoMotionCombiner(PyObject *self, Piavca::TwoMotionCombiner const &tmc);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setStartTime(float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_TwoMotionCombiner();
    virtual void reset();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_ScaleMotion : public Piavca::ScaleMotion, public Swig::Director {

public:
    SwigDirector_ScaleMotion(PyObject *self, Piavca::Motion *m = NULL, float scale = 1.0);
    SwigDirector_ScaleMotion(PyObject *self, Piavca::ScaleMotion const &sm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_ScaleMotion();
    virtual void reset();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_ScaleMotionSpeed : public Piavca::ScaleMotionSpeed, public Swig::Director {

public:
    SwigDirector_ScaleMotionSpeed(PyObject *self, Piavca::Motion *m = NULL, float scale = 1.0);
    SwigDirector_ScaleMotionSpeed(PyObject *self, Piavca::ScaleMotionSpeed const &sm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_ScaleMotionSpeed();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_ScaleMotionRoot : public Piavca::ScaleMotionRoot, public Swig::Director {

public:
    SwigDirector_ScaleMotionRoot(PyObject *self, Piavca::Motion *m = NULL, float scale = 1.0);
    SwigDirector_ScaleMotionRoot(PyObject *self, Piavca::ScaleMotionRoot const &sm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual void reset();
    virtual ~SwigDirector_ScaleMotionRoot();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_TimeOffset : public Piavca::TimeOffset, public Swig::Director {

public:
    SwigDirector_TimeOffset(PyObject *self, Piavca::Motion *mot = NULL, float offs = 0.0f);
    SwigDirector_TimeOffset(PyObject *self, Piavca::TimeOffset const &to);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual Piavca::Motion *clone();
    virtual void setStartTime(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_TimeOffset();
    virtual void reset();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_TurnMotion : public Piavca::TurnMotion, public Swig::Director {

public:
    SwigDirector_TurnMotion(PyObject *self, Piavca::Motion *m = NULL, Piavca::Quat rot = Piavca::Quat());
    SwigDirector_TurnMotion(PyObject *self, Piavca::TurnMotion const &tm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_TurnMotion();
    virtual void reset();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_SequentialBlend : public Piavca::SequentialBlend, public Swig::Director {

public:
    SwigDirector_SequentialBlend(PyObject *self, Piavca::Motion *mot1 = NULL, Piavca::Motion *mot2 = NULL, float interval = 0.2, float start = 0.0);
    SwigDirector_SequentialBlend(PyObject *self, Piavca::SequentialBlend const &sb);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual Piavca::Motion *clone();
    virtual void setStartTime(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_SequentialBlend();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_SelfBlend : public Piavca::SelfBlend, public Swig::Director {

public:
    SwigDirector_SelfBlend(PyObject *self, Piavca::Motion *mot = NULL, float interval = 0.2);
    SwigDirector_SelfBlend(PyObject *self, Piavca::SelfBlend const &sb);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Motion *clone();
    virtual void reblend(float time);
    virtual Piavca::Motion *getMotion();
    virtual bool isRandomAccess();
    virtual ~SwigDirector_SelfBlend();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual void setMotion(Piavca::Motion *mot);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_LoopMotion : public Piavca::LoopMotion, public Swig::Director {

public:
    SwigDirector_LoopMotion(PyObject *self, Piavca::Motion *mot = NULL, float _endTime = -1, float interval = 0.01);
    SwigDirector_LoopMotion(PyObject *self, Piavca::LoopMotion const &l);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual void reblend(float time);
    virtual Piavca::Motion *getMotion();
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_LoopMotion();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual void setMotion(Piavca::Motion *mot);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_RandomTimingsLoop : public Piavca::RandomTimingsLoop, public Swig::Director {

public:
    SwigDirector_RandomTimingsLoop(PyObject *self, Piavca::Motion *mot = NULL, float endTime = -1.0, float interval = 0.01, float min = 1.0, float max = 1.0);
    SwigDirector_RandomTimingsLoop(PyObject *self, Piavca::RandomTimingsLoop const &rtl);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *getMotion();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Motion *clone();
    virtual void setTimingParams(float minTimeScale, float maxTimeScale);
    virtual void reblend(float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_RandomTimingsLoop();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual void setMotion(Piavca::Motion *m);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_BlendBetween : public Piavca::BlendBetween, public Swig::Director {

public:
    SwigDirector_BlendBetween(PyObject *self, Piavca::Motion *m1 = NULL, Piavca::Motion *m2 = NULL, float _blend = 0.0f);
    SwigDirector_BlendBetween(PyObject *self, Piavca::BlendBetween const &b);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_BlendBetween();
    virtual void reset();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_MotionAdder : public Piavca::MotionAdder, public Swig::Director {

public:
    SwigDirector_MotionAdder(PyObject *self, Piavca::Motion *m1 = NULL, Piavca::Motion *m2 = NULL, float _scaleSecond = 1.0);
    SwigDirector_MotionAdder(PyObject *self, Piavca::MotionAdder const &ma);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_MotionAdder();
    virtual void reset();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_MaskedMotion : public Piavca::MaskedMotion, public Swig::Director {

public:
    SwigDirector_MaskedMotion(PyObject *self);
    SwigDirector_MaskedMotion(PyObject *self, Piavca::Motion *_mot, Piavca::MotionMask const &_mask);
    SwigDirector_MaskedMotion(PyObject *self, Piavca::MaskedMotion const &mm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_MaskedMotion();
    virtual void reset();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_ChoiceLoopMotion : public Piavca::ChoiceLoopMotion, public Swig::Director {

public:
    SwigDirector_ChoiceLoopMotion(PyObject *self);
    SwigDirector_ChoiceLoopMotion(PyObject *self, Piavca::MotionVec const &mpv, float endTime = -1.0, float interval = 0.01);
    SwigDirector_ChoiceLoopMotion(PyObject *self, Piavca::ChoiceLoopMotion const &cl);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *getMotion();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setTimingParams(float minTimeScale, float maxTimeScale);
    virtual void reblend(float time);
    virtual Piavca::Motion *clone();
    virtual bool isRandomAccess();
    virtual ~SwigDirector_ChoiceLoopMotion();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual void setMotion(Piavca::Motion *m);
    virtual void addMotion(Piavca::Motion *mot);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_RandomLoopMotion : public Piavca::RandomLoopMotion, public Swig::Director {

public:
    SwigDirector_RandomLoopMotion(PyObject *self);
    SwigDirector_RandomLoopMotion(PyObject *self, Piavca::MotionVec const &mv, vector<float > ws, float endTime = -1.0, float interval = 0.01);
    SwigDirector_RandomLoopMotion(PyObject *self, Piavca::RandomLoopMotion const &rl);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void shift();
    virtual void setStartTime(float time);
    virtual Piavca::Motion *getMotion();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setTimingParams(float minTimeScale, float maxTimeScale);
    virtual void reblend(float time);
    virtual Piavca::Motion *clone();
    virtual void addMotion(Piavca::Motion *mot, float weight = 1.0f);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_RandomLoopMotion();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual void setMotion(Piavca::Motion *m);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_RandomBlendLoop : public Piavca::RandomBlendLoop, public Swig::Director {

public:
    SwigDirector_RandomBlendLoop(PyObject *self, Piavca::MotionVec const &mv, float endTime = -1.0, float interval = 0.01);
    SwigDirector_RandomBlendLoop(PyObject *self, float endTime = -1.0, float interval = 0.01);
    SwigDirector_RandomBlendLoop(PyObject *self, Piavca::RandomBlendLoop const &rbl);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void shift();
    virtual void setStartTime(float time);
    virtual Piavca::Motion *getMotion();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setTimingParams(float minTimeScale, float maxTimeScale);
    virtual void reblend(float time);
    virtual Piavca::Motion *clone();
    virtual void addMotion(Piavca::Motion *mot, float weight);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_RandomBlendLoop();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual void setMotion(Piavca::Motion *m);
    virtual void addMotion(Piavca::Motion *mot);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_RandomAddLoop : public Piavca::RandomAddLoop, public Swig::Director {

public:
    SwigDirector_RandomAddLoop(PyObject *self);
    SwigDirector_RandomAddLoop(PyObject *self, Piavca::MotionVec const &mv, float endTime = -1.0, float interval = 0.01);
    SwigDirector_RandomAddLoop(PyObject *self, Piavca::RandomAddLoop const &rbl);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void shift();
    virtual void setStartTime(float time);
    virtual Piavca::Motion *getMotion();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setTimingParams(float minTimeScale, float maxTimeScale);
    virtual void reblend(float time);
    virtual Piavca::Motion *clone();
    virtual bool isRandomAccess();
    virtual ~SwigDirector_RandomAddLoop();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual void setMotion(Piavca::Motion *m);
    virtual void addMotion(Piavca::Motion *mot);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_LookAtMotion : public Piavca::LookAtMotion, public Swig::Director {

public:
    SwigDirector_LookAtMotion(PyObject *self, Piavca::Avatar *target, int joint, float _endTime = -1, float _interval = 0.5);
    SwigDirector_LookAtMotion(PyObject *self, Piavca::Object *target, float _endTime = -1, float _interval = 0.5);
    SwigDirector_LookAtMotion(PyObject *self, Piavca::Vec const &target, float _endTime = -1, bool _local = false, float _interval = 0.5);
    SwigDirector_LookAtMotion(PyObject *self, Piavca::LookAtMotion const &lam);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float t);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual void reset();
    virtual ~SwigDirector_LookAtMotion();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual bool loaded();
    virtual void unload();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_RandomGazeMotion : public Piavca::RandomGazeMotion, public Swig::Director {

public:
    SwigDirector_RandomGazeMotion(PyObject *self, float endTime = -1.0, float interval = 0.01);
    SwigDirector_RandomGazeMotion(PyObject *self, Piavca::RandomGazeMotion const &rg);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *getMotion();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Motion *clone();
    virtual void reblend(float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_RandomGazeMotion();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual bool lookAt(Piavca::tstring name, bool force = false);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual void setMotion(Piavca::Motion *mot);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_ZeroMotion : public Piavca::ZeroMotion, public Swig::Director {

public:
    SwigDirector_ZeroMotion(PyObject *self, bool _facial = false);
    SwigDirector_ZeroMotion(PyObject *self, Piavca::ZeroMotion const &zm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float t);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual void reset();
    virtual ~SwigDirector_ZeroMotion();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual bool loaded();
    virtual void unload();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_MotionSaver : public Piavca::MotionSaver, public Swig::Director {

public:
    SwigDirector_MotionSaver(PyObject *self, Piavca::Motion *mot);
    SwigDirector_MotionSaver(PyObject *self, Piavca::MotionSaver const &to);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_MotionSaver();
    virtual void reset();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_SubMotion : public Piavca::SubMotion, public Swig::Director {

public:
    SwigDirector_SubMotion(PyObject *self);
    SwigDirector_SubMotion(PyObject *self, Piavca::Motion *m, float _start, float _end);
    SwigDirector_SubMotion(PyObject *self, Piavca::SubMotion const &sm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_SubMotion();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_TimeRangeMotion : public Piavca::TimeRangeMotion, public Swig::Director {

public:
    SwigDirector_TimeRangeMotion(PyObject *self);
    SwigDirector_TimeRangeMotion(PyObject *self, Piavca::Motion *m, float _start, float _end);
    SwigDirector_TimeRangeMotion(PyObject *self, Piavca::TimeRangeMotion const &sm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_TimeRangeMotion();
    virtual void reset();
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_TimeWarp : public Piavca::TimeWarp, public Swig::Director {

public:
    SwigDirector_TimeWarp(PyObject *self, Piavca::Motion *m = NULL, Piavca::Motion *warp = NULL);
    SwigDirector_TimeWarp(PyObject *self, Piavca::TimeWarp const &tw);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *clone();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_TimeWarp();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


class SwigDirector_DiadicGazeMotion : public Piavca::DiadicGazeMotion, public Swig::Director {

public:
    SwigDirector_DiadicGazeMotion(PyObject *self, Piavca::Avatar *other, float endTime = -1.0, float interval = 0.01);
    SwigDirector_DiadicGazeMotion(PyObject *self, Piavca::DiadicGazeMotion const &dg);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual void load(Piavca::Avatar *av);
    virtual void setStartTime(float time);
    virtual Piavca::Motion *getMotion();
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Motion *clone();
    virtual void reblend(float time);
    virtual bool isRandomAccess();
    virtual ~SwigDirector_DiadicGazeMotion();
    virtual void reset();
    virtual bool isFacial();
    virtual float getMotionLength() const;
    virtual void unload();
    virtual bool loaded();
    virtual void printInfo();
    virtual void setMaintainY(bool b);
    virtual void setAccumulateRoot(bool b);
    virtual bool lookAt(Piavca::tstring name, bool force = false);
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual void setMotion(Piavca::Motion *mot);
    virtual bool isNull(int trackId) const;
    virtual Piavca::trackType getTrackType(int trackId) const;
};


#endif
