/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Piavca_base_WRAP_H_
#define SWIG_Piavca_base_WRAP_H_

#include <map>
#include <string>


class SwigDirector_TimeCallback : public Piavca::TimeCallback, public Swig::Director {

public:
    SwigDirector_TimeCallback(PyObject *self, Piavca::tstring _name);
    virtual ~SwigDirector_TimeCallback();
    virtual void init(Piavca::Core *core);
    virtual void timeStep(Piavca::Core *core, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class TimeCallback doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[2];
#endif

};


class SwigDirector_AvatarTimeCallback : public Piavca::AvatarTimeCallback, public Swig::Director {

public:
    SwigDirector_AvatarTimeCallback(PyObject *self, Piavca::tstring _name);
    virtual ~SwigDirector_AvatarTimeCallback();
    virtual void init(Piavca::Avatar *avatar);
    virtual void timeStep(Piavca::Avatar *avatar, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class AvatarTimeCallback doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[2];
#endif

};


class SwigDirector_Motion : public Piavca::Motion, public Swig::Director {

public:
    SwigDirector_Motion(PyObject *self);
    SwigDirector_Motion(PyObject *self, Piavca::Motion const &mot);
    virtual ~SwigDirector_Motion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float t);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class Motion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_KeyframeMotion : public Piavca::KeyframeMotion, public Swig::Director {

public:
    SwigDirector_KeyframeMotion(PyObject *self, Piavca::tstring fileName, int flags = Piavca::TRANS_NONE, Piavca::Motion *basePosture = NULL);
    SwigDirector_KeyframeMotion(PyObject *self, bool _facial = false);
    SwigDirector_KeyframeMotion(PyObject *self, Piavca::MotionImp *_imp);
    SwigDirector_KeyframeMotion(PyObject *self, Piavca::KeyframeMotion const &mot);
    SwigDirector_KeyframeMotion(PyObject *self, Piavca::Motion &mot);
    virtual ~SwigDirector_KeyframeMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float t);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setFacial(bool _facial);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class KeyframeMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[25];
#endif

};


class SwigDirector_MotionFilter : public Piavca::MotionFilter, public Swig::Director {

public:
    SwigDirector_MotionFilter(PyObject *self);
    SwigDirector_MotionFilter(PyObject *self, Piavca::Motion *mot);
    SwigDirector_MotionFilter(PyObject *self, Piavca::MotionFilter const &mf);
    virtual ~SwigDirector_MotionFilter();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class MotionFilter doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_TwoMotionCombiner : public Piavca::TwoMotionCombiner, public Swig::Director {

public:
    SwigDirector_TwoMotionCombiner(PyObject *self);
    SwigDirector_TwoMotionCombiner(PyObject *self, Piavca::Motion *m1, Piavca::Motion *m2);
    SwigDirector_TwoMotionCombiner(PyObject *self, Piavca::TwoMotionCombiner const &tmc);
    virtual ~SwigDirector_TwoMotionCombiner();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class TwoMotionCombiner doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_MultiMotionCombiner : public Piavca::MultiMotionCombiner, public Swig::Director {

public:
    SwigDirector_MultiMotionCombiner(PyObject *self, Piavca::MotionVec const &mv);
    SwigDirector_MultiMotionCombiner(PyObject *self);
    SwigDirector_MultiMotionCombiner(PyObject *self, Piavca::MultiMotionCombiner const &rl);
    virtual ~SwigDirector_MultiMotionCombiner();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void addMotion(Piavca::Motion *mot);
    virtual bool loaded(Piavca::Avatar *av);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class MultiMotionCombiner doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[26];
#endif

};


class SwigDirector_MaskedMotion : public Piavca::MaskedMotion, public Swig::Director {

public:
    SwigDirector_MaskedMotion(PyObject *self);
    SwigDirector_MaskedMotion(PyObject *self, Piavca::Motion *_mot, Piavca::MotionMask const &_mask);
    SwigDirector_MaskedMotion(PyObject *self, Piavca::MaskedMotion const &mm);
    virtual ~SwigDirector_MaskedMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class MaskedMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_ScaleMotion : public Piavca::ScaleMotion, public Swig::Director {

public:
    SwigDirector_ScaleMotion(PyObject *self, Piavca::Motion *m = NULL, float scale = 1.0);
    SwigDirector_ScaleMotion(PyObject *self, Piavca::ScaleMotion const &sm);
    virtual ~SwigDirector_ScaleMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class ScaleMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_ScaleMotionSpeed : public Piavca::ScaleMotionSpeed, public Swig::Director {

public:
    SwigDirector_ScaleMotionSpeed(PyObject *self, Piavca::Motion *m = NULL, float scale = 1.0);
    SwigDirector_ScaleMotionSpeed(PyObject *self, Piavca::ScaleMotionSpeed const &sm);
    virtual ~SwigDirector_ScaleMotionSpeed();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class ScaleMotionSpeed doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_ChangeMotionLength : public Piavca::ChangeMotionLength, public Swig::Director {

public:
    SwigDirector_ChangeMotionLength(PyObject *self, Piavca::Motion *mot = NULL, float len = 1.0f);
    SwigDirector_ChangeMotionLength(PyObject *self, Piavca::ChangeMotionLength const &cml);
    virtual ~SwigDirector_ChangeMotionLength();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setMotion(Piavca::Motion *mot);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class ChangeMotionLength doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[25];
#endif

};


class SwigDirector_ScaleMotionRoot : public Piavca::ScaleMotionRoot, public Swig::Director {

public:
    SwigDirector_ScaleMotionRoot(PyObject *self, Piavca::Motion *m = NULL, float scale = 1.0);
    SwigDirector_ScaleMotionRoot(PyObject *self, Piavca::ScaleMotionRoot const &sm);
    virtual ~SwigDirector_ScaleMotionRoot();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class ScaleMotionRoot doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_TimeOffset : public Piavca::TimeOffset, public Swig::Director {

public:
    SwigDirector_TimeOffset(PyObject *self, Piavca::Motion *mot = NULL, float offs = 0.0f);
    SwigDirector_TimeOffset(PyObject *self, Piavca::TimeOffset const &to);
    virtual ~SwigDirector_TimeOffset();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class TimeOffset doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_Sequence : public Piavca::Sequence, public Swig::Director {

public:
    SwigDirector_Sequence(PyObject *self, Piavca::Motion *mot1 = NULL, Piavca::Motion *mot2 = NULL);
    SwigDirector_Sequence(PyObject *self, Piavca::Sequence const &sb);
    virtual ~SwigDirector_Sequence();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class Sequence doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_MotionPosture : public Piavca::MotionPosture, public Swig::Director {

public:
    SwigDirector_MotionPosture(PyObject *self, Piavca::Motion *m = NULL, bool _facial = false);
    SwigDirector_MotionPosture(PyObject *self, Piavca::MotionPosture const &m);
    virtual ~SwigDirector_MotionPosture();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float t);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setFacial(bool _facial);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class MotionPosture doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[25];
#endif

};


class SwigDirector_AvatarPosture : public Piavca::AvatarPosture, public Swig::Director {

public:
    SwigDirector_AvatarPosture(PyObject *self, bool _facial = false);
    SwigDirector_AvatarPosture(PyObject *self, Piavca::AvatarPosture const &m);
    virtual ~SwigDirector_AvatarPosture();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float t);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setFacial(bool _facial);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class AvatarPosture doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[25];
#endif

};


class SwigDirector_PostureBlend : public Piavca::PostureBlend, public Swig::Director {

public:
    SwigDirector_PostureBlend(PyObject *self, Piavca::Motion *mot = NULL, float interval = 0.2);
    SwigDirector_PostureBlend(PyObject *self, Piavca::PostureBlend const &pb);
    virtual ~SwigDirector_PostureBlend();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void reblend(float time);
    virtual void setMotion(Piavca::Motion *mot);
    virtual Piavca::Motion *getMotion();


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class PostureBlend doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[27];
#endif

};


class SwigDirector_Reposition : public Piavca::Reposition, public Swig::Director {

public:
    SwigDirector_Reposition(PyObject *self, Piavca::Motion *m = NULL, Piavca::Vec pos = Piavca::Vec(), Piavca::Quat ori = Piavca::Quat());
    SwigDirector_Reposition(PyObject *self, Piavca::Reposition const &r);
    virtual ~SwigDirector_Reposition();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setMaintainY(bool b);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class Reposition doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[25];
#endif

};


class SwigDirector_LoopMotion : public Piavca::LoopMotion, public Swig::Director {

public:
    SwigDirector_LoopMotion(PyObject *self, Piavca::Motion *mot = NULL, float _endTime = -1);
    SwigDirector_LoopMotion(PyObject *self, Piavca::LoopMotion const &l);
    virtual ~SwigDirector_LoopMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class LoopMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_RandomTimingsMotion : public Piavca::RandomTimingsMotion, public Swig::Director {

public:
    SwigDirector_RandomTimingsMotion(PyObject *self, Piavca::Motion *mot = NULL, float min = 1.0, float max = 1.0);
    SwigDirector_RandomTimingsMotion(PyObject *self, Piavca::RandomTimingsMotion const &rtm);
    virtual ~SwigDirector_RandomTimingsMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void setTimingParams(float minTimeScale, float maxTimeScale);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class RandomTimingsMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[25];
#endif

};


class SwigDirector_BlendBetween : public Piavca::BlendBetween, public Swig::Director {

public:
    SwigDirector_BlendBetween(PyObject *self, Piavca::Motion *m1 = NULL, Piavca::Motion *m2 = NULL, float _blend = 0.0f);
    SwigDirector_BlendBetween(PyObject *self, Piavca::BlendBetween const &b);
    virtual ~SwigDirector_BlendBetween();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class BlendBetween doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_MotionAdder : public Piavca::MotionAdder, public Swig::Director {

public:
    SwigDirector_MotionAdder(PyObject *self);
    SwigDirector_MotionAdder(PyObject *self, Piavca::MotionVec const &mv);
    SwigDirector_MotionAdder(PyObject *self, Piavca::MotionAdder const &ma);
    virtual ~SwigDirector_MotionAdder();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void addMotion(Piavca::Motion *mot);
    virtual bool loaded(Piavca::Avatar *av);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class MotionAdder doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[26];
#endif

};


class SwigDirector_Subtract : public Piavca::Subtract, public Swig::Director {

public:
    SwigDirector_Subtract(PyObject *self, Piavca::Motion *m1 = NULL, Piavca::Motion *m2 = NULL);
    SwigDirector_Subtract(PyObject *self, Piavca::Subtract const &su);
    virtual ~SwigDirector_Subtract();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class Subtract doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_ChoiceMotion : public Piavca::ChoiceMotion, public Swig::Director {

public:
    SwigDirector_ChoiceMotion(PyObject *self);
    SwigDirector_ChoiceMotion(PyObject *self, Piavca::MotionVec const &mpv);
    SwigDirector_ChoiceMotion(PyObject *self, Piavca::ChoiceMotion const &cl);
    virtual ~SwigDirector_ChoiceMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual void addMotion(Piavca::Motion *mot);
    virtual int makeChoice();


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class ChoiceMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[26];
#endif

};


class SwigDirector_PointAt : public Piavca::PointAt, public Swig::Director {

public:
    SwigDirector_PointAt(PyObject *self);
    SwigDirector_PointAt(PyObject *self, int joint, Piavca::Vec const &target, bool _local = true);
    SwigDirector_PointAt(PyObject *self, int joint, Piavca::Motion *target, int target_joint);
    SwigDirector_PointAt(PyObject *self, Piavca::PointAt const &pa);
    virtual ~SwigDirector_PointAt();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class PointAt doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_LookAtMotion : public Piavca::LookAtMotion, public Swig::Director {

public:
    SwigDirector_LookAtMotion(PyObject *self);
    SwigDirector_LookAtMotion(PyObject *self, Piavca::Avatar *target, int joint, float _endTime = -1, float _interval = 0.5);
    SwigDirector_LookAtMotion(PyObject *self, Piavca::Object *target, float _endTime = -1, float _interval = 0.5);
    SwigDirector_LookAtMotion(PyObject *self, Piavca::Vec const &target, float _endTime = -1, bool _local = false, float _interval = 0.5);
    SwigDirector_LookAtMotion(PyObject *self, Piavca::LookAtMotion const &lam);
    virtual ~SwigDirector_LookAtMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float t);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class LookAtMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_RandomGazeMotion : public Piavca::RandomGazeMotion, public Swig::Director {

public:
    SwigDirector_RandomGazeMotion(PyObject *self, float endTime = -1.0, float interval = 0.01);
    SwigDirector_RandomGazeMotion(PyObject *self, Piavca::RandomGazeMotion const &rg);
    virtual ~SwigDirector_RandomGazeMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool lookAt(Piavca::tstring name, bool force = false);
    virtual void reblend(float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class RandomGazeMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[27];
#endif

};


class SwigDirector_ZeroMotion : public Piavca::ZeroMotion, public Swig::Director {

public:
    SwigDirector_ZeroMotion(PyObject *self, bool _facial = false);
    SwigDirector_ZeroMotion(PyObject *self, Piavca::ZeroMotion const &zm);
    virtual ~SwigDirector_ZeroMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float t);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class ZeroMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_MotionSaver : public Piavca::MotionSaver, public Swig::Director {

public:
    SwigDirector_MotionSaver(PyObject *self, Piavca::Motion *mot = NULL);
    SwigDirector_MotionSaver(PyObject *self, Piavca::MotionSaver const &to);
    virtual ~SwigDirector_MotionSaver();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class MotionSaver doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_SubMotion : public Piavca::SubMotion, public Swig::Director {

public:
    SwigDirector_SubMotion(PyObject *self);
    SwigDirector_SubMotion(PyObject *self, Piavca::Motion *m, float _start, float _end);
    SwigDirector_SubMotion(PyObject *self, Piavca::SubMotion const &sm);
    virtual ~SwigDirector_SubMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class SubMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_TimeWarp : public Piavca::TimeWarp, public Swig::Director {

public:
    SwigDirector_TimeWarp(PyObject *self, Piavca::Motion *m = NULL, Piavca::Motion *warp = NULL);
    SwigDirector_TimeWarp(PyObject *self, Piavca::TimeWarp const &tw);
    virtual ~SwigDirector_TimeWarp();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class TimeWarp doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[24];
#endif

};


class SwigDirector_DiadicGazeMotion : public Piavca::DiadicGazeMotion, public Swig::Director {

public:
    SwigDirector_DiadicGazeMotion(PyObject *self, Piavca::Avatar *other = NULL, float endTime = -1.0, float interval = 0.01);
    SwigDirector_DiadicGazeMotion(PyObject *self, Piavca::DiadicGazeMotion const &dg);
    virtual ~SwigDirector_DiadicGazeMotion();
    virtual Piavca::Motion *clone();
    virtual Piavca::tstring getClassName();
    virtual void create();
    virtual void printInfo();
    virtual void load(Piavca::Avatar *av);
    virtual void unload();
    virtual bool loaded();
    virtual Piavca::Avatar *getAvatar();
    virtual void setStartTime(float time);
    virtual void reset();
    virtual void event(Piavca::tstring ev);
    virtual std::vector<Piavca::tstring,std::allocator<Piavca::tstring > > getEventNames();
    virtual void cleanRecursionState();
    virtual Piavca::Motion *findSub(Piavca::tstring nm);
    virtual Piavca::Motion *findSubByType(type_info const &ty);
    virtual float getMotionLength() const;
    virtual bool isFacial();
    virtual bool isRandomAccess();
    virtual bool isNull(int trackId) const;
    virtual int getTrackType(int trackId) const;
    virtual void preFrame(float time);
    virtual float getFloatValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Vec getVecValueAtTimeInternal(int trackId, float time);
    virtual Piavca::Quat getQuatValueAtTimeInternal(int trackId, float time);
    virtual bool lookAt(Piavca::tstring name, bool force = false);
    virtual void reblend(float time);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class DiadicGazeMotion doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[27];
#endif

};


#endif
